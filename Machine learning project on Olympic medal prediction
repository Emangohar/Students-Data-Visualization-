{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNQgIjSjdQZ0dyUl28/8jo4",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Emangohar/Students-Data-Visualization-/blob/main/Machine%20learning%20project%20on%20Olympic%20medal%20prediction\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "kWme-q0E760o"
      },
      "execution_count": 223,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "teams = pd.read_csv('/content/teams.csv')\n",
        "teams"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "RZVjDQ-j8C5H",
        "outputId": "90cda8af-a79d-4687-8be4-877728e747ba"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     team      country  year  events  athletes   age  height  weight  medals  \\\n",
              "0     AFG  Afghanistan  1964       8         8  22.0   161.0    64.2       0   \n",
              "1     AFG  Afghanistan  1968       5         5  23.2   170.2    70.0       0   \n",
              "2     AFG  Afghanistan  1972       8         8  29.0   168.3    63.8       0   \n",
              "3     AFG  Afghanistan  1980      11        11  23.6   168.4    63.2       0   \n",
              "4     AFG  Afghanistan  2004       5         5  18.6   170.8    64.8       0   \n",
              "...   ...          ...   ...     ...       ...   ...     ...     ...     ...   \n",
              "2139  ZIM     Zimbabwe  2000      19        26  25.0   179.0    71.1       0   \n",
              "2140  ZIM     Zimbabwe  2004      11        14  25.1   177.8    70.5       3   \n",
              "2141  ZIM     Zimbabwe  2008      15        16  26.1   171.9    63.7       4   \n",
              "2142  ZIM     Zimbabwe  2012       8         9  27.3   174.4    65.2       0   \n",
              "2143  ZIM     Zimbabwe  2016      13        31  27.5   167.8    62.2       0   \n",
              "\n",
              "      prev_medals  prev_3_medals  \n",
              "0             0.0            0.0  \n",
              "1             0.0            0.0  \n",
              "2             0.0            0.0  \n",
              "3             0.0            0.0  \n",
              "4             0.0            0.0  \n",
              "...           ...            ...  \n",
              "2139          0.0            0.0  \n",
              "2140          0.0            0.0  \n",
              "2141          3.0            1.0  \n",
              "2142          4.0            2.3  \n",
              "2143          0.0            2.3  \n",
              "\n",
              "[2144 rows x 11 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5fd453b9-b2c1-4202-9167-35627c5e155b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>country</th>\n",
              "      <th>year</th>\n",
              "      <th>events</th>\n",
              "      <th>athletes</th>\n",
              "      <th>age</th>\n",
              "      <th>height</th>\n",
              "      <th>weight</th>\n",
              "      <th>medals</th>\n",
              "      <th>prev_medals</th>\n",
              "      <th>prev_3_medals</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>1964</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>22.0</td>\n",
              "      <td>161.0</td>\n",
              "      <td>64.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>1968</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>23.2</td>\n",
              "      <td>170.2</td>\n",
              "      <td>70.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>1972</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>29.0</td>\n",
              "      <td>168.3</td>\n",
              "      <td>63.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>1980</td>\n",
              "      <td>11</td>\n",
              "      <td>11</td>\n",
              "      <td>23.6</td>\n",
              "      <td>168.4</td>\n",
              "      <td>63.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>2004</td>\n",
              "      <td>5</td>\n",
              "      <td>5</td>\n",
              "      <td>18.6</td>\n",
              "      <td>170.8</td>\n",
              "      <td>64.8</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2139</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2000</td>\n",
              "      <td>19</td>\n",
              "      <td>26</td>\n",
              "      <td>25.0</td>\n",
              "      <td>179.0</td>\n",
              "      <td>71.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2140</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2004</td>\n",
              "      <td>11</td>\n",
              "      <td>14</td>\n",
              "      <td>25.1</td>\n",
              "      <td>177.8</td>\n",
              "      <td>70.5</td>\n",
              "      <td>3</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2141</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2008</td>\n",
              "      <td>15</td>\n",
              "      <td>16</td>\n",
              "      <td>26.1</td>\n",
              "      <td>171.9</td>\n",
              "      <td>63.7</td>\n",
              "      <td>4</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2142</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2012</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>27.3</td>\n",
              "      <td>174.4</td>\n",
              "      <td>65.2</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2143</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2016</td>\n",
              "      <td>13</td>\n",
              "      <td>31</td>\n",
              "      <td>27.5</td>\n",
              "      <td>167.8</td>\n",
              "      <td>62.2</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>2.3</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2144 rows × 11 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5fd453b9-b2c1-4202-9167-35627c5e155b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5fd453b9-b2c1-4202-9167-35627c5e155b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5fd453b9-b2c1-4202-9167-35627c5e155b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bcc9c57d-2004-4359-b359-9da9150b00b1\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bcc9c57d-2004-4359-b359-9da9150b00b1')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bcc9c57d-2004-4359-b359-9da9150b00b1 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_2ef1b1d7-eb4e-47b8-92e2-5e3f11152334\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('teams')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_2ef1b1d7-eb4e-47b8-92e2-5e3f11152334 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('teams');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "teams",
              "summary": "{\n  \"name\": \"teams\",\n  \"rows\": 2144,\n  \"fields\": [\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 219,\n        \"samples\": [\n          \"PLW\",\n          \"IRQ\",\n          \"YUG\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 235,\n        \"samples\": [\n          \"Unified Team\",\n          \"Tajikistan\",\n          \"Serbia and Montenegro\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15,\n        \"min\": 1964,\n        \"max\": 2016,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          1984,\n          1992,\n          1964\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"events\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 49,\n        \"min\": 1,\n        \"max\": 270,\n        \"num_unique_values\": 216,\n        \"samples\": [\n          181,\n          258,\n          139\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"athletes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 127,\n        \"min\": 1,\n        \"max\": 839,\n        \"num_unique_values\": 367,\n        \"samples\": [\n          53,\n          106,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.808558627018641,\n        \"min\": 17.0,\n        \"max\": 66.0,\n        \"num_unique_values\": 160,\n        \"samples\": [\n          20.5,\n          18.7,\n          31.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"height\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5.357367436828869,\n        \"min\": 151.0,\n        \"max\": 193.0,\n        \"num_unique_values\": 273,\n        \"samples\": [\n          174.3,\n          163.7,\n          170.7\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"weight\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 7.6065067850564905,\n        \"min\": 43.0,\n        \"max\": 148.0,\n        \"num_unique_values\": 354,\n        \"samples\": [\n          58.8,\n          64.4,\n          63.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 33,\n        \"min\": 0,\n        \"max\": 442,\n        \"num_unique_values\": 133,\n        \"samples\": [\n          74,\n          45,\n          15\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prev_medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31.95191969707357,\n        \"min\": 0.0,\n        \"max\": 442.0,\n        \"num_unique_values\": 126,\n        \"samples\": [\n          102.0,\n          183.0,\n          171.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prev_3_medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28.232226735033553,\n        \"min\": 0.0,\n        \"max\": 314.0,\n        \"num_unique_values\": 222,\n        \"samples\": [\n          67.7,\n          261.0,\n          40.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 160
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "teams_numeric = teams[[\"year\" ,\"events\",\"athletes\" ,\"age\" ,\"medals\", \"prev_medals\"]]\n",
        "teams_numeric.corr()[\"medals\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "YzWlWlsQO-d1",
        "outputId": "f6ab5405-12fe-4ead-afea-42c743feb940"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "year          -0.021603\n",
              "events         0.771330\n",
              "athletes       0.840817\n",
              "age            0.025096\n",
              "medals         1.000000\n",
              "prev_medals    0.920048\n",
              "Name: medals, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>medals</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>year</th>\n",
              "      <td>-0.021603</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>events</th>\n",
              "      <td>0.771330</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>athletes</th>\n",
              "      <td>0.840817</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0.025096</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>medals</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>prev_medals</th>\n",
              "      <td>0.920048</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 171
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "_2X8RBmkP9BP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.lmplot(x=\"athletes\",y=\"medals\",data=teams)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "AXhlyfH5OxEy",
        "outputId": "782dab3e-c786-48a6-d868-943159520fd5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x786c6e5265d0>"
            ]
          },
          "metadata": {},
          "execution_count": 176
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.lmplot(x=\"age\",y=\"medals\",data=teams)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "iTMOaTa-QbI5",
        "outputId": "d8320648-a51a-4ca8-f648-a84e3fd45ddf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<seaborn.axisgrid.FacetGrid at 0x786c6e525070>"
            ]
          },
          "metadata": {},
          "execution_count": 178
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 500x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "teams.plot.hist(y=\"medals\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "uGN71VHFQ8aL",
        "outputId": "b5cb90a0-7b74-4642-e79e-1d4566134374"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 179
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "teams[teams.isnull().any(axis=1)].head(20)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 676
        },
        "id": "TL7HGnvjRPUj",
        "outputId": "cf0292ec-ccd4-4764-8b91-c7a066436641"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    team                 country  year  events  athletes   age  medals  \\\n",
              "19   ALB                 Albania  1992       8         9  25.3       0   \n",
              "26   ALG                 Algeria  1964       7         7  26.0       0   \n",
              "39   AND                 Andorra  1976       2         3  28.3       0   \n",
              "50   ANG                  Angola  1980      14        17  17.4       0   \n",
              "59   ANT     Antigua and Barbuda  1976      11        17  23.2       0   \n",
              "82   ARM                 Armenia  1996      36        38  24.0       2   \n",
              "88   ARU                   Aruba  1988      10        12  27.8       0   \n",
              "96   ASA          American Samoa  1988       6         6  27.0       0   \n",
              "131  AZE              Azerbaijan  1996      23        24  25.1       1   \n",
              "150  BAN              Bangladesh  1984       2         2  21.0       0   \n",
              "159  BAR                Barbados  1968      10        13  24.2       0   \n",
              "171  BDI                 Burundi  1996       6         7  25.4       1   \n",
              "191  BEN                   Benin  1972       3         3  23.0       0   \n",
              "215  BHU                  Bhutan  1984       2         6  26.3       0   \n",
              "224  BIH  Bosnia and Herzegovina  1992      13        13  26.6       0   \n",
              "231  BIZ                  Belize  1968       6         7  29.1       0   \n",
              "243  BLR                 Belarus  1996     115       259  23.5      23   \n",
              "249  BOL                 Bolivia  1964       1         1  34.0       0   \n",
              "262  BOT                Botswana  1980       8         8  26.0       0   \n",
              "286  BRN                 Bahrain  1984       8        14  21.3       0   \n",
              "\n",
              "     prev_medals  \n",
              "19           NaN  \n",
              "26           NaN  \n",
              "39           NaN  \n",
              "50           NaN  \n",
              "59           NaN  \n",
              "82           NaN  \n",
              "88           NaN  \n",
              "96           NaN  \n",
              "131          NaN  \n",
              "150          NaN  \n",
              "159          NaN  \n",
              "171          NaN  \n",
              "191          NaN  \n",
              "215          NaN  \n",
              "224          NaN  \n",
              "231          NaN  \n",
              "243          NaN  \n",
              "249          NaN  \n",
              "262          NaN  \n",
              "286          NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7f427a9e-d663-48f7-a2e6-2e7bc32f32ff\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>country</th>\n",
              "      <th>year</th>\n",
              "      <th>events</th>\n",
              "      <th>athletes</th>\n",
              "      <th>age</th>\n",
              "      <th>medals</th>\n",
              "      <th>prev_medals</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>ALB</td>\n",
              "      <td>Albania</td>\n",
              "      <td>1992</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>25.3</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>ALG</td>\n",
              "      <td>Algeria</td>\n",
              "      <td>1964</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>39</th>\n",
              "      <td>AND</td>\n",
              "      <td>Andorra</td>\n",
              "      <td>1976</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>28.3</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50</th>\n",
              "      <td>ANG</td>\n",
              "      <td>Angola</td>\n",
              "      <td>1980</td>\n",
              "      <td>14</td>\n",
              "      <td>17</td>\n",
              "      <td>17.4</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59</th>\n",
              "      <td>ANT</td>\n",
              "      <td>Antigua and Barbuda</td>\n",
              "      <td>1976</td>\n",
              "      <td>11</td>\n",
              "      <td>17</td>\n",
              "      <td>23.2</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82</th>\n",
              "      <td>ARM</td>\n",
              "      <td>Armenia</td>\n",
              "      <td>1996</td>\n",
              "      <td>36</td>\n",
              "      <td>38</td>\n",
              "      <td>24.0</td>\n",
              "      <td>2</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>88</th>\n",
              "      <td>ARU</td>\n",
              "      <td>Aruba</td>\n",
              "      <td>1988</td>\n",
              "      <td>10</td>\n",
              "      <td>12</td>\n",
              "      <td>27.8</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>96</th>\n",
              "      <td>ASA</td>\n",
              "      <td>American Samoa</td>\n",
              "      <td>1988</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>27.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>131</th>\n",
              "      <td>AZE</td>\n",
              "      <td>Azerbaijan</td>\n",
              "      <td>1996</td>\n",
              "      <td>23</td>\n",
              "      <td>24</td>\n",
              "      <td>25.1</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>150</th>\n",
              "      <td>BAN</td>\n",
              "      <td>Bangladesh</td>\n",
              "      <td>1984</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>21.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>159</th>\n",
              "      <td>BAR</td>\n",
              "      <td>Barbados</td>\n",
              "      <td>1968</td>\n",
              "      <td>10</td>\n",
              "      <td>13</td>\n",
              "      <td>24.2</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>171</th>\n",
              "      <td>BDI</td>\n",
              "      <td>Burundi</td>\n",
              "      <td>1996</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>25.4</td>\n",
              "      <td>1</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>191</th>\n",
              "      <td>BEN</td>\n",
              "      <td>Benin</td>\n",
              "      <td>1972</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>23.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>215</th>\n",
              "      <td>BHU</td>\n",
              "      <td>Bhutan</td>\n",
              "      <td>1984</td>\n",
              "      <td>2</td>\n",
              "      <td>6</td>\n",
              "      <td>26.3</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>224</th>\n",
              "      <td>BIH</td>\n",
              "      <td>Bosnia and Herzegovina</td>\n",
              "      <td>1992</td>\n",
              "      <td>13</td>\n",
              "      <td>13</td>\n",
              "      <td>26.6</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>231</th>\n",
              "      <td>BIZ</td>\n",
              "      <td>Belize</td>\n",
              "      <td>1968</td>\n",
              "      <td>6</td>\n",
              "      <td>7</td>\n",
              "      <td>29.1</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>243</th>\n",
              "      <td>BLR</td>\n",
              "      <td>Belarus</td>\n",
              "      <td>1996</td>\n",
              "      <td>115</td>\n",
              "      <td>259</td>\n",
              "      <td>23.5</td>\n",
              "      <td>23</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>249</th>\n",
              "      <td>BOL</td>\n",
              "      <td>Bolivia</td>\n",
              "      <td>1964</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>34.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>262</th>\n",
              "      <td>BOT</td>\n",
              "      <td>Botswana</td>\n",
              "      <td>1980</td>\n",
              "      <td>8</td>\n",
              "      <td>8</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>286</th>\n",
              "      <td>BRN</td>\n",
              "      <td>Bahrain</td>\n",
              "      <td>1984</td>\n",
              "      <td>8</td>\n",
              "      <td>14</td>\n",
              "      <td>21.3</td>\n",
              "      <td>0</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7f427a9e-d663-48f7-a2e6-2e7bc32f32ff')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7f427a9e-d663-48f7-a2e6-2e7bc32f32ff button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7f427a9e-d663-48f7-a2e6-2e7bc32f32ff');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-629df6d6-a4f2-4b1c-a3d9-39497ba7482b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-629df6d6-a4f2-4b1c-a3d9-39497ba7482b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-629df6d6-a4f2-4b1c-a3d9-39497ba7482b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"teams[teams\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"ALB\",\n          \"BOL\",\n          \"BIZ\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 20,\n        \"samples\": [\n          \"Albania\",\n          \"Bolivia\",\n          \"Belize\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 10,\n        \"min\": 1964,\n        \"max\": 1996,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          1968,\n          1964,\n          1988\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"events\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 1,\n        \"max\": 115,\n        \"num_unique_values\": 13,\n        \"samples\": [\n          115,\n          3,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"athletes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 56,\n        \"min\": 1,\n        \"max\": 259,\n        \"num_unique_values\": 14,\n        \"samples\": [\n          13,\n          1,\n          9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.438309713247271,\n        \"min\": 17.4,\n        \"max\": 34.0,\n        \"num_unique_values\": 19,\n        \"samples\": [\n          25.3,\n          24.0,\n          25.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 5,\n        \"min\": 0,\n        \"max\": 23,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          2,\n          23,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prev_medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": null,\n        \"min\": null,\n        \"max\": null,\n        \"num_unique_values\": 0,\n        \"samples\": [],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 180
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "teams = teams.dropna()"
      ],
      "metadata": {
        "id": "aYpCx8FJRxrw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "teams.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MN8v0wKudvWw",
        "outputId": "292ff9dc-e90c-43a1-8aa5-dc4563af977f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2014, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 185
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "train = teams[teams[\"year\"] < 2012].copy()\n",
        "test = teams[teams[\"year\"] >= 2012].copy()"
      ],
      "metadata": {
        "id": "XwPOT5vfSEaP"
      },
      "execution_count": 240,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# About 80% of the data\n",
        "train.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9ks28K8Md4aT",
        "outputId": "a7d69e2f-5e3d-4837-e444-7faf7e2cbcc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1609, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 187
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# About 20% of the data\n",
        "test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dfm4-qFBeQuD",
        "outputId": "feb270a0-0044-4e65-cf2b-e3d9002d9a51"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(405, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 188
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "reg = LinearRegression()"
      ],
      "metadata": {
        "id": "mVMSf-5WeYus"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "predictors = [\"athletes\",\"prev_medals\"]\n",
        "target = \"medals\""
      ],
      "metadata": {
        "id": "8dfEUnqXfi4U"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "reg.fit(train[predictors],train[\"medals\"])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "7eeiomNCfu-R",
        "outputId": "4f164db4-29dc-4d2c-fa8c-fa93245d29be"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: #000;\n",
              "  --sklearn-color-text-muted: #666;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: flex;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "  align-items: start;\n",
              "  justify-content: space-between;\n",
              "  gap: 0.5em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label .caption {\n",
              "  font-size: 0.6rem;\n",
              "  font-weight: lighter;\n",
              "  color: var(--sklearn-color-text-muted);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 0.5em;\n",
              "  text-align: center;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LinearRegression</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "predictions = reg.predict(test[predictors])"
      ],
      "metadata": {
        "id": "xHqbVHgbgB2k"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test[\"predictions\"] = predictions\n",
        "test"
      ],
      "metadata": {
        "id": "LMlTn310gafP",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "730ecc57-a049-4a88-d0de-bac4aa42f5da"
      },
      "execution_count": 243,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     team      country  year  events  athletes   age  medals  prev_medals  \\\n",
              "6     AFG  Afghanistan  2012       6         6  24.8       1          1.0   \n",
              "7     AFG  Afghanistan  2016       3         3  24.7       0          1.0   \n",
              "24    ALB      Albania  2012       9        10  25.7       0          0.0   \n",
              "25    ALB      Albania  2016       6         6  23.7       0          0.0   \n",
              "37    ALG      Algeria  2012      29        39  24.8       1          2.0   \n",
              "...   ...          ...   ...     ...       ...   ...     ...          ...   \n",
              "2111  YEM        Yemen  2016       3         3  19.3       0          0.0   \n",
              "2131  ZAM       Zambia  2012       7         7  22.6       0          0.0   \n",
              "2132  ZAM       Zambia  2016       7         7  24.1       0          0.0   \n",
              "2142  ZIM     Zimbabwe  2012       8         9  27.3       0          4.0   \n",
              "2143  ZIM     Zimbabwe  2016      13        31  27.5       0          0.0   \n",
              "\n",
              "      predictions  \n",
              "6       -0.961221  \n",
              "7       -1.176333  \n",
              "24      -1.425032  \n",
              "25      -1.711847  \n",
              "37       2.155629  \n",
              "...           ...  \n",
              "2111    -1.926958  \n",
              "2131    -1.640143  \n",
              "2132    -1.640143  \n",
              "2142     1.505767  \n",
              "2143     0.080748  \n",
              "\n",
              "[405 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dca25200-e6e5-4bad-a20c-ac24d15e79aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>country</th>\n",
              "      <th>year</th>\n",
              "      <th>events</th>\n",
              "      <th>athletes</th>\n",
              "      <th>age</th>\n",
              "      <th>medals</th>\n",
              "      <th>prev_medals</th>\n",
              "      <th>predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>2012</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>24.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-0.961221</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>2016</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>24.7</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>-1.176333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>ALB</td>\n",
              "      <td>Albania</td>\n",
              "      <td>2012</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>25.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.425032</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>ALB</td>\n",
              "      <td>Albania</td>\n",
              "      <td>2016</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>23.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.711847</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>ALG</td>\n",
              "      <td>Algeria</td>\n",
              "      <td>2012</td>\n",
              "      <td>29</td>\n",
              "      <td>39</td>\n",
              "      <td>24.8</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.155629</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2111</th>\n",
              "      <td>YEM</td>\n",
              "      <td>Yemen</td>\n",
              "      <td>2016</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>19.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.926958</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2131</th>\n",
              "      <td>ZAM</td>\n",
              "      <td>Zambia</td>\n",
              "      <td>2012</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>22.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.640143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2132</th>\n",
              "      <td>ZAM</td>\n",
              "      <td>Zambia</td>\n",
              "      <td>2016</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>24.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>-1.640143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2142</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2012</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>27.3</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>1.505767</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2143</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2016</td>\n",
              "      <td>13</td>\n",
              "      <td>31</td>\n",
              "      <td>27.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.080748</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>405 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dca25200-e6e5-4bad-a20c-ac24d15e79aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dca25200-e6e5-4bad-a20c-ac24d15e79aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dca25200-e6e5-4bad-a20c-ac24d15e79aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-76ad5a92-a379-4aca-95a0-be7dfd75d050\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-76ad5a92-a379-4aca-95a0-be7dfd75d050')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-76ad5a92-a379-4aca-95a0-be7dfd75d050 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_c3d0131b-3f81-43d9-a63d-93c627427757\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c3d0131b-3f81-43d9-a63d-93c627427757 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test",
              "summary": "{\n  \"name\": \"test\",\n  \"rows\": 405,\n  \"fields\": [\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 204,\n        \"samples\": [\n          \"BAR\",\n          \"ASA\",\n          \"MAD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 205,\n        \"samples\": [\n          \"Barbados\",\n          \"American Samoa\",\n          \"Kyrgyzstan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2012,\n        \"max\": 2016,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2016,\n          2012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"events\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50,\n        \"min\": 1,\n        \"max\": 249,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          186,\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"athletes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 121,\n        \"min\": 1,\n        \"max\": 719,\n        \"num_unique_values\": 138,\n        \"samples\": [\n          62,\n          222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3731904949950344,\n        \"min\": 18.0,\n        \"max\": 34.2,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          30.9,\n          25.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 0,\n        \"max\": 264,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prev_medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.622522475739416,\n        \"min\": 0.0,\n        \"max\": 317.0,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          99.0,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predictions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.84440311517459,\n        \"min\": -2.0703656757811153,\n        \"max\": 285.21012066401187,\n        \"num_unique_values\": 199,\n        \"samples\": [\n          6.338979432906628,\n          146.55687557866455\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 243
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test.loc[test[\"predictions\"] < 0,\"predictions\"] = 0\n"
      ],
      "metadata": {
        "id": "_yJI3WcuhbiY"
      },
      "execution_count": 244,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test[\"predictions\"] =test[\"predictions\"].round()\n",
        "test"
      ],
      "metadata": {
        "id": "HDUX-zGShwyI",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "outputId": "06bab142-df5b-4ca5-b559-cc85ee6f9063"
      },
      "execution_count": 245,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     team      country  year  events  athletes   age  medals  prev_medals  \\\n",
              "6     AFG  Afghanistan  2012       6         6  24.8       1          1.0   \n",
              "7     AFG  Afghanistan  2016       3         3  24.7       0          1.0   \n",
              "24    ALB      Albania  2012       9        10  25.7       0          0.0   \n",
              "25    ALB      Albania  2016       6         6  23.7       0          0.0   \n",
              "37    ALG      Algeria  2012      29        39  24.8       1          2.0   \n",
              "...   ...          ...   ...     ...       ...   ...     ...          ...   \n",
              "2111  YEM        Yemen  2016       3         3  19.3       0          0.0   \n",
              "2131  ZAM       Zambia  2012       7         7  22.6       0          0.0   \n",
              "2132  ZAM       Zambia  2016       7         7  24.1       0          0.0   \n",
              "2142  ZIM     Zimbabwe  2012       8         9  27.3       0          4.0   \n",
              "2143  ZIM     Zimbabwe  2016      13        31  27.5       0          0.0   \n",
              "\n",
              "      predictions  \n",
              "6             0.0  \n",
              "7             0.0  \n",
              "24            0.0  \n",
              "25            0.0  \n",
              "37            2.0  \n",
              "...           ...  \n",
              "2111          0.0  \n",
              "2131          0.0  \n",
              "2132          0.0  \n",
              "2142          2.0  \n",
              "2143          0.0  \n",
              "\n",
              "[405 rows x 9 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5ce774e5-e569-41a4-8ed0-b58fef8fbf58\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>country</th>\n",
              "      <th>year</th>\n",
              "      <th>events</th>\n",
              "      <th>athletes</th>\n",
              "      <th>age</th>\n",
              "      <th>medals</th>\n",
              "      <th>prev_medals</th>\n",
              "      <th>predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>2012</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>24.8</td>\n",
              "      <td>1</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>AFG</td>\n",
              "      <td>Afghanistan</td>\n",
              "      <td>2016</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>24.7</td>\n",
              "      <td>0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>ALB</td>\n",
              "      <td>Albania</td>\n",
              "      <td>2012</td>\n",
              "      <td>9</td>\n",
              "      <td>10</td>\n",
              "      <td>25.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>ALB</td>\n",
              "      <td>Albania</td>\n",
              "      <td>2016</td>\n",
              "      <td>6</td>\n",
              "      <td>6</td>\n",
              "      <td>23.7</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>ALG</td>\n",
              "      <td>Algeria</td>\n",
              "      <td>2012</td>\n",
              "      <td>29</td>\n",
              "      <td>39</td>\n",
              "      <td>24.8</td>\n",
              "      <td>1</td>\n",
              "      <td>2.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2111</th>\n",
              "      <td>YEM</td>\n",
              "      <td>Yemen</td>\n",
              "      <td>2016</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>19.3</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2131</th>\n",
              "      <td>ZAM</td>\n",
              "      <td>Zambia</td>\n",
              "      <td>2012</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>22.6</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2132</th>\n",
              "      <td>ZAM</td>\n",
              "      <td>Zambia</td>\n",
              "      <td>2016</td>\n",
              "      <td>7</td>\n",
              "      <td>7</td>\n",
              "      <td>24.1</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2142</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2012</td>\n",
              "      <td>8</td>\n",
              "      <td>9</td>\n",
              "      <td>27.3</td>\n",
              "      <td>0</td>\n",
              "      <td>4.0</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2143</th>\n",
              "      <td>ZIM</td>\n",
              "      <td>Zimbabwe</td>\n",
              "      <td>2016</td>\n",
              "      <td>13</td>\n",
              "      <td>31</td>\n",
              "      <td>27.5</td>\n",
              "      <td>0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>405 rows × 9 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5ce774e5-e569-41a4-8ed0-b58fef8fbf58')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5ce774e5-e569-41a4-8ed0-b58fef8fbf58 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5ce774e5-e569-41a4-8ed0-b58fef8fbf58');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fc87fe7d-d2fe-48b8-a2fa-c5ade16f1b97\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fc87fe7d-d2fe-48b8-a2fa-c5ade16f1b97')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fc87fe7d-d2fe-48b8-a2fa-c5ade16f1b97 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "  <div id=\"id_367c0df6-f935-4733-8269-679b309bda29\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('test')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_367c0df6-f935-4733-8269-679b309bda29 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('test');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test",
              "summary": "{\n  \"name\": \"test\",\n  \"rows\": 405,\n  \"fields\": [\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 204,\n        \"samples\": [\n          \"BAR\",\n          \"ASA\",\n          \"MAD\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 205,\n        \"samples\": [\n          \"Barbados\",\n          \"American Samoa\",\n          \"Kyrgyzstan\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2012,\n        \"max\": 2016,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2016,\n          2012\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"events\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 50,\n        \"min\": 1,\n        \"max\": 249,\n        \"num_unique_values\": 111,\n        \"samples\": [\n          186,\n          30\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"athletes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 121,\n        \"min\": 1,\n        \"max\": 719,\n        \"num_unique_values\": 138,\n        \"samples\": [\n          62,\n          222\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3731904949950344,\n        \"min\": 18.0,\n        \"max\": 34.2,\n        \"num_unique_values\": 101,\n        \"samples\": [\n          30.9,\n          25.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 0,\n        \"max\": 264,\n        \"num_unique_values\": 58,\n        \"samples\": [\n          1,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prev_medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.622522475739416,\n        \"min\": 0.0,\n        \"max\": 317.0,\n        \"num_unique_values\": 55,\n        \"samples\": [\n          99.0,\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predictions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 30.538030177611564,\n        \"min\": 0.0,\n        \"max\": 285.0,\n        \"num_unique_values\": 61,\n        \"samples\": [\n          0.0,\n          5.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 245
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import mean_absolute_error\n",
        "error = mean_absolute_error(test[\"medals\"],test[\"predictions\"])\n",
        "error"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8igqAgHyiL1s",
        "outputId": "3cd1186a-7159-4af0-f412-11f0d565b4c7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.2987654320987656"
            ]
          },
          "metadata": {},
          "execution_count": 208
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "teams.describe()[\"medals\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "BR3fD4hIiwCa",
        "outputId": "b257d247-dbba-4085-8e89-86963d733ab8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "count    2014.000000\n",
              "mean       10.990070\n",
              "std        33.627528\n",
              "min         0.000000\n",
              "25%         0.000000\n",
              "50%         0.000000\n",
              "75%         5.000000\n",
              "max       442.000000\n",
              "Name: medals, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>medals</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2014.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>10.990070</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>33.627528</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>442.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 203
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test[test[\"team\"] == \"USA\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "5pdEoMLOjNJT",
        "outputId": "f69cea87-4808-4758-b894-e0a22ad4d490"
      },
      "execution_count": 246,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "     team        country  year  events  athletes   age  medals  prev_medals  \\\n",
              "2053  USA  United States  2012     245       689  26.7     248        317.0   \n",
              "2054  USA  United States  2016     245       719  26.4     264        248.0   \n",
              "\n",
              "      predictions  \n",
              "2053        285.0  \n",
              "2054        236.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e3a9a59c-9777-4770-bd4d-aa204345da96\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>country</th>\n",
              "      <th>year</th>\n",
              "      <th>events</th>\n",
              "      <th>athletes</th>\n",
              "      <th>age</th>\n",
              "      <th>medals</th>\n",
              "      <th>prev_medals</th>\n",
              "      <th>predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2053</th>\n",
              "      <td>USA</td>\n",
              "      <td>United States</td>\n",
              "      <td>2012</td>\n",
              "      <td>245</td>\n",
              "      <td>689</td>\n",
              "      <td>26.7</td>\n",
              "      <td>248</td>\n",
              "      <td>317.0</td>\n",
              "      <td>285.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2054</th>\n",
              "      <td>USA</td>\n",
              "      <td>United States</td>\n",
              "      <td>2016</td>\n",
              "      <td>245</td>\n",
              "      <td>719</td>\n",
              "      <td>26.4</td>\n",
              "      <td>264</td>\n",
              "      <td>248.0</td>\n",
              "      <td>236.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e3a9a59c-9777-4770-bd4d-aa204345da96')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e3a9a59c-9777-4770-bd4d-aa204345da96 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e3a9a59c-9777-4770-bd4d-aa204345da96');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e2164a1e-4d04-459d-bed1-a9886659cb8b\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e2164a1e-4d04-459d-bed1-a9886659cb8b')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e2164a1e-4d04-459d-bed1-a9886659cb8b button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"test[test[\\\"team\\\"] == \\\"USA\\\"]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"USA\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"United States\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2012,\n        \"max\": 2016,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"events\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 245,\n        \"max\": 245,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          245\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"athletes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 689,\n        \"max\": 719,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          719\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.21213203435596475,\n        \"min\": 26.4,\n        \"max\": 26.7,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          26.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11,\n        \"min\": 248,\n        \"max\": 264,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prev_medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 48.79036790187178,\n        \"min\": 248.0,\n        \"max\": 317.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          248.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predictions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34.64823227814083,\n        \"min\": 236.0,\n        \"max\": 285.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          236.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 246
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "test[test[\"team\"] ==\"IND\"]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 112
        },
        "id": "8YLwWgcsjgGt",
        "outputId": "3690f73d-95af-4b2e-829f-e8f3d1ceb5ec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    team country  year  events  athletes   age  medals  prev_medals  \\\n",
              "907  IND   India  2012      55        95  26.0       6          3.0   \n",
              "908  IND   India  2016      67       130  26.1       2          6.0   \n",
              "\n",
              "     predictions  \n",
              "907          7.0  \n",
              "908         12.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-57062557-8ce3-4058-9088-ab9beb0bc446\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>team</th>\n",
              "      <th>country</th>\n",
              "      <th>year</th>\n",
              "      <th>events</th>\n",
              "      <th>athletes</th>\n",
              "      <th>age</th>\n",
              "      <th>medals</th>\n",
              "      <th>prev_medals</th>\n",
              "      <th>predictions</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>907</th>\n",
              "      <td>IND</td>\n",
              "      <td>India</td>\n",
              "      <td>2012</td>\n",
              "      <td>55</td>\n",
              "      <td>95</td>\n",
              "      <td>26.0</td>\n",
              "      <td>6</td>\n",
              "      <td>3.0</td>\n",
              "      <td>7.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>908</th>\n",
              "      <td>IND</td>\n",
              "      <td>India</td>\n",
              "      <td>2016</td>\n",
              "      <td>67</td>\n",
              "      <td>130</td>\n",
              "      <td>26.1</td>\n",
              "      <td>2</td>\n",
              "      <td>6.0</td>\n",
              "      <td>12.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-57062557-8ce3-4058-9088-ab9beb0bc446')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-57062557-8ce3-4058-9088-ab9beb0bc446 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-57062557-8ce3-4058-9088-ab9beb0bc446');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fce8884f-0aa6-4f3c-8bd6-01e16f521c36\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fce8884f-0aa6-4f3c-8bd6-01e16f521c36')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fce8884f-0aa6-4f3c-8bd6-01e16f521c36 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"test[test[\\\"team\\\"] ==\\\"IND\\\"]\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"team\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"IND\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"India\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2012,\n        \"max\": 2016,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2016\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"events\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 8,\n        \"min\": 55,\n        \"max\": 67,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          67\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"athletes\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 24,\n        \"min\": 95,\n        \"max\": 130,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          130\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07071067811865576,\n        \"min\": 26.0,\n        \"max\": 26.1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          26.1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2,\n        \"max\": 6,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"prev_medals\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1213203435596424,\n        \"min\": 3.0,\n        \"max\": 6.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          6.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"predictions\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3.5355339059327378,\n        \"min\": 7.0,\n        \"max\": 12.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          12.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 205
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "errors = (test[\"medals\"] - test[\"predictions\"]).abs()\n",
        "errors"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "fqYg46IbjzZ5",
        "outputId": "84e68df4-43ae-4b60-b3c3-dad0f44b85e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6       1.0\n",
              "7       0.0\n",
              "24      0.0\n",
              "25      0.0\n",
              "37      1.0\n",
              "       ... \n",
              "2111    0.0\n",
              "2131    0.0\n",
              "2132    0.0\n",
              "2142    2.0\n",
              "2143    0.0\n",
              "Length: 405, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>37</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2111</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2131</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2132</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2142</th>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2143</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>405 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 207
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "error_by_team =errors.groupby(test[\"team\"]).mean()\n",
        "error_by_team"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "YJkZpLOkkGzk",
        "outputId": "e18a6c9b-9bc9-45a7-c455-9ce007a7b9e4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "team\n",
              "AFG    0.5\n",
              "ALB    0.0\n",
              "ALG    1.5\n",
              "AND    0.0\n",
              "ANG    0.0\n",
              "      ... \n",
              "VIE    1.0\n",
              "VIN    0.0\n",
              "YEM    0.0\n",
              "ZAM    0.0\n",
              "ZIM    1.0\n",
              "Length: 204, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>AFG</th>\n",
              "      <td>0.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ALB</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ALG</th>\n",
              "      <td>1.5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AND</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANG</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VIE</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VIN</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YEM</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ZAM</th>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ZIM</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>204 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 209
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "medals_by_team = test[\"medals\"].groupby(test[\"team\"]).mean()"
      ],
      "metadata": {
        "id": "cfcBc6WUk7iX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "error_ratio = error_by_team / medals_by_team\n",
        "error_ratio"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "YWso2Ctblee_",
        "outputId": "379ca269-83bb-4e8d-f99f-4dac3fab0181"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "team\n",
              "AFG    1.0\n",
              "ALB    NaN\n",
              "ALG    1.0\n",
              "AND    NaN\n",
              "ANG    NaN\n",
              "      ... \n",
              "VIE    1.0\n",
              "VIN    NaN\n",
              "YEM    NaN\n",
              "ZAM    NaN\n",
              "ZIM    inf\n",
              "Length: 204, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>AFG</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ALB</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ALG</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AND</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANG</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VIE</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VIN</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YEM</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ZAM</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ZIM</th>\n",
              "      <td>inf</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>204 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 220
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "error_ratio[pd.isnull(error_ratio)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "id": "1hYXcJ-9mUzy",
        "outputId": "8c645324-2953-421d-e22c-1629757fe01f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "team\n",
              "ALB   NaN\n",
              "AND   NaN\n",
              "ANG   NaN\n",
              "ANT   NaN\n",
              "ARU   NaN\n",
              "       ..\n",
              "URU   NaN\n",
              "VAN   NaN\n",
              "VIN   NaN\n",
              "YEM   NaN\n",
              "ZAM   NaN\n",
              "Length: 102, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>ALB</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AND</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANG</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANT</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ARU</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>URU</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VAN</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VIN</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YEM</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ZAM</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>102 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 221
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x100 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "error_ration=error_ratio[np.isfinite(error_ratio)]\n",
        "error_ratio\n"
      ],
      "metadata": {
        "id": "jFdcd1YNm9ut",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 615
        },
        "outputId": "9e04ef8e-7777-4182-efe6-161a6d2a5cdd"
      },
      "execution_count": 227,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "team\n",
              "AFG    1.0\n",
              "ALB    NaN\n",
              "ALG    1.0\n",
              "AND    NaN\n",
              "ANG    NaN\n",
              "      ... \n",
              "VIE    1.0\n",
              "VIN    NaN\n",
              "YEM    NaN\n",
              "ZAM    NaN\n",
              "ZIM    inf\n",
              "Length: 204, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>AFG</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ALB</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ALG</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AND</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ANG</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VIE</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>VIN</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>YEM</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ZAM</th>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ZIM</th>\n",
              "      <td>inf</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>204 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 227
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 400x100 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "error_ration.plot.hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 447
        },
        "id": "-oky9WDMrSFc",
        "outputId": "3397a459-e3ab-4e9f-afdc-cd87faa0fc41"
      },
      "execution_count": 232,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='Frequency'>"
            ]
          },
          "metadata": {},
          "execution_count": 232
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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AQAA1CeoKzLffPONJk6cqNLSUnk8Hj388MOKiorSK6+8Io/Ho40bN4Z6TgAAgOsEdUVm0aJFGjp0qL777ju1a9fOv3/GjBnKz88P2XAAAAD1CeqKzD//+U99/PHHioyMDNifnJys//znPyEZDAAA4GaCuiLj9XpVW1t73f5z584pKirqlocCAABoiKBCZvz48VqzZo3/ts1mU3V1tZYvX87XFgAAgCYT1EtLr776qiZMmKB+/frpypUrmjNnjk6cOKEuXbronXfeCfWMAAAAdQoqZBITE3XkyBFt3rxZR48eVXV1tdLS0vT4448HLP4FAAC4nYIKGUmKiIjQE088EcpZAAAAGiWokNm0aVO998+dOzeoYQAAABojqJBZtGhRwO2amhp9//33ioyMVPv27QkZAADQJIJ619J3330XsFVXV6ukpEQjR45ksS8AAGgyQX/X0k/17t1bK1asuO5qDQAAwO0SspCRri0ALisrC+UpAQAAbiioNTJ///vfA277fD6Vl5dr3bp1GjFiREgGAwAAuJmgQmb69OkBt202m7p27aqHHnpIr776aijmAgAAuKmgQsbr9YZ6DgAAgEYL6RoZAACAphTUFZmMjIwGH7t69epgfgUAAMBNBRUyn3/+uT7//HPV1NSob9++kqSvvvpKrVu31uDBg/3H2Wy20EwJAABQh6BCZurUqYqKitLbb7+tO+64Q9K1D8mbP3++HnzwQT377LMhHRIAAKAuQa2RefXVV5WVleWPGEm644479PLLL/OuJQAA0GSCChmXy6ULFy5ct//ChQuqqqq65aEAAAAaIqiQmTFjhubPn6+tW7fq3LlzOnfunP72t78pLS1NM2fODPWMAAAAdQpqjczGjRu1dOlSzZkzRzU1NddOFBGhtLQ0rVq1KqQDAgAA3EhQIdO+fXtt2LBBq1at0qlTpyRJd911lzp06BDS4QAAAOpzSx+IV15ervLycvXu3VsdOnSQz+cL1VwAAAA3FVTIXLx4UWPHjlWfPn00efJklZeXS5LS0tJ46zUAAGgyQYXMkiVL1KZNG5WWlqp9+/b+/bNnz9bOnTsbfJ4DBw5o6tSpSkhIkM1m0/bt2wPunzdvnmw2W8A2ceLEYEYGAADNUFBrZP7xj39o165dSkxMDNjfu3dvffPNNw0+j9vt1sCBA/WLX/zihu92mjhxonJycvy3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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "error_ration.sort_values()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 489
        },
        "id": "WXlpQ0UVrifa",
        "outputId": "77fb5a0a-0f5a-45c5-c8ea-840a959431e2"
      },
      "execution_count": 239,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "team\n",
              "FRA    0.022472\n",
              "CAN    0.048387\n",
              "NZL    0.063492\n",
              "RUS    0.082353\n",
              "ITA    0.121429\n",
              "         ...   \n",
              "MAR    2.000000\n",
              "EGY    2.400000\n",
              "HKG    3.000000\n",
              "POR    3.333333\n",
              "AUT    4.500000\n",
              "Length: 97, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>team</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>FRA</th>\n",
              "      <td>0.022472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>CAN</th>\n",
              "      <td>0.048387</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>NZL</th>\n",
              "      <td>0.063492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>RUS</th>\n",
              "      <td>0.082353</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ITA</th>\n",
              "      <td>0.121429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>MAR</th>\n",
              "      <td>2.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>EGY</th>\n",
              "      <td>2.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>HKG</th>\n",
              "      <td>3.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>POR</th>\n",
              "      <td>3.333333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>AUT</th>\n",
              "      <td>4.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>97 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 239
        }
      ]
    }
  ]
}